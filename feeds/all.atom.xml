<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>On the shoulders of giants</title><link href="http://diegoquintanav.github.io/" rel="alternate"></link><link href="http://diegoquintanav.github.io/feeds/all.atom.xml" rel="self"></link><id>http://diegoquintanav.github.io/</id><updated>2018-11-24T13:14:00-06:00</updated><entry><title>Flask contexts (And how to use them)</title><link href="http://diegoquintanav.github.io/flask-contexts.html" rel="alternate"></link><published>2018-11-24T13:14:00-06:00</published><updated>2018-11-24T13:14:00-06:00</updated><author><name>Diego Quintana</name></author><id>tag:diegoquintanav.github.io,2018-11-24:flask-contexts.html</id><summary type="html">&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;There's this thing going on with the &lt;a href="http://flask.pocoo.org/docs/1.0/appcontext/#creating-an-application-context"&gt;flask context&lt;/a&gt; and the &lt;a href="http://flask.pocoo.org/docs/1.0/reqcontext/"&gt;request context&lt;/a&gt;, that used to confuse me a lot. Before testing these two probably will never be used, but after reading &lt;a href="http://flask.pocoo.org/docs/1.0/testing/"&gt;the documentation&lt;/a&gt; and writing your first tests, it's probable that you run into something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Flask.url_for() error: Attempted to generate a URL without the application context being pushed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, what is that went &lt;em&gt;wrong&lt;/em&gt;? &lt;/p&gt;
&lt;p&gt;Someone already wrote an &lt;a href="http://kronosapiens.github.io/blog/2014/08/14/understanding-contexts-in-flask.html"&gt;exhaustive revision&lt;/a&gt; of what are the different approaches, but it actually never closes the issue of &lt;em&gt;how&lt;/em&gt; to test an application properly. &lt;/p&gt;
&lt;p&gt;Others mention it, but it just &lt;em&gt;doesn't stick&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;- [Delightful testing with pytest and Flask-SQLAlchemy&lt;/th&gt;
&lt;th&gt;Alex Michael](http://alexmic.net/flask-sqlalchemy-pytest/)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;- &lt;a href="https://www.patricksoftwareblog.com/testing-a-flask-application-using-pytest/"&gt;Testing a Flask Application using pytest – Patrick's Software Blog&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- &lt;a href="https://github.com/pallets/flask/tree/1.0.2/examples/tutorial/tests"&gt;flask/examples/tutorial/tests at 1.0.2 · pallets/flask · GitHub&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For the sake of completeness and for my own understanding of the issue, here's my view on the topic.&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In the lifecycle of a request, both an &lt;em&gt;Application context&lt;/em&gt; and a &lt;em&gt;Request Context&lt;/em&gt; are created at the beginning, and destroyed at the end (see &lt;a href="https://speakerdeck.com/mitsuhiko/advanced-flask-patterns-1?slide=7"&gt;Advanced Flask Patterns - Speaker Deck, Slide 7&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The idea behind having two detached contexts is so an application can exist
  outside of a request, and it's more of a design pattern (That a lot of people seems to &lt;em&gt;hate&lt;/em&gt;) and it was different in previous versions of Flask &lt;a href="https://stackoverflow.com/questions/15083967/when-should-flask-g-be-used"&gt;as discussed in this SO question (Which is also a great discussion about the internals of Flask).&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, &lt;em&gt;context locals&lt;/em&gt; can be summarized as (as shown in &lt;a href="https://speakerdeck.com/mitsuhiko/flask-for-fun-and-profit?slide=27"&gt;Flask for Fun and Profit, Slide 27&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A pushed app context points the current app in use to &lt;code&gt;current_app&lt;/code&gt;, and it gives
  meaning to other proxies that only make sense for some parameters in a &lt;em&gt;live&lt;/em&gt;
  app instance, like &lt;code&gt;url_for&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A request context is more expensive and maps the &lt;code&gt;request&lt;/code&gt; proxy to the current
  request in process&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pallets/flask/blob/1949c4a9abc174bf29620f6dd8ceab9ed3ace2eb/flask/ctx.py#L230"&gt;Every request pushes a new application context&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;So, how do I test my app?&lt;/h2&gt;
&lt;p&gt;I will be using &lt;a href="https://docs.pytest.org/en/latest/"&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt; because it's good. Just google "&lt;code&gt;unittest versus pytest&lt;/code&gt;" to find out why.&lt;/p&gt;
&lt;p&gt;This &lt;a href="https://stackoverflow.com/a/17377101/5819113"&gt;SO answer&lt;/a&gt; summarizes the differences in the best way I've found so far.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to make a request to your application, use the &lt;a href="http://flask.pocoo.org/docs/latest/api/#flask.Flask.test_client"&gt;&lt;code&gt;test_client&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c = app.test_client()
response = c.get(&amp;#39;/test/url&amp;#39;)
# test response
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to test code which uses an application context (&lt;code&gt;current_app&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;url_for&lt;/code&gt;), push an &lt;a href="http://flask.pocoo.org/docs/latest/api/#flask.Flask.app_context"&gt;&lt;code&gt;app_context&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with app.app_context():
    # test your app context code
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want test code which uses a request context (&lt;code&gt;request&lt;/code&gt;, &lt;code&gt;session&lt;/code&gt;), push a &lt;a href="http://flask.pocoo.org/docs/latest/api/#flask.Flask.test_request_context"&gt;&lt;code&gt;test_request_context&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with current_app.test_request_context():
    # test your request context code
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;It's also important to note that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Both app and request contexts can also be pushed manually, which is useful when using the interpreter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; ctx = app.app_context()
&amp;gt;&amp;gt;&amp;gt; ctx.push()
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;So far there are &lt;em&gt;two&lt;/em&gt; approaches:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;push an application context at the beginning inside a fixture, and pop it at the end&lt;/li&gt;
&lt;li&gt;pass an application object from the fixture and produce contexts locally inside
   each test&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Everything in the middle is prone to produce weird results and drive you crazy, so &lt;em&gt;try&lt;/em&gt; to be consistent!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lucumr.pocoo.org/about/"&gt;Armin Ronacher&lt;/a&gt; suggests a pytest fixture pattern in &lt;a href="https://youtu.be/1ByQhAM5c1I?t=2285"&gt;this presentation&lt;/a&gt; (&lt;a href="https://speakerdeck.com/mitsuhiko/flask-for-fun-and-profit?slide=52"&gt;slides&lt;/a&gt;), which relies in the first approach. The code is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# import app factory pattern&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yourapp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# pushes an application context manually&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# bind the test life with the context through the &lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfinalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfinalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;request&lt;/code&gt; here refers to the &lt;a href="https://docs.pytest.org/en/latest/reference.html#request"&gt;&lt;code&gt;pytest&lt;/code&gt; fixture&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;But how do I test? really&lt;/h2&gt;
&lt;p&gt;After a lot of churning and with the help of &lt;code&gt;#pocoo&lt;/code&gt; in IRC, I came up with this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A test runner for the app&amp;#39;s Click commands.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_cli_runner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ciae_app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autouse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Creates a flask app context&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;request_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Creates a flask request context&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_request_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;use_cookies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@pytest.fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ciae_app.extensions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# seed the database&lt;/span&gt;
    &lt;span class="n"&gt;seed_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

    &lt;span class="c1"&gt;# teardown database&lt;/span&gt;
    &lt;span class="c1"&gt;# https://stackoverflow.com/a/18365654/5819113&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;seed_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# insert default users and roles&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Seeding the database or something&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is working for me. In short&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If your test requires a living app, import the &lt;code&gt;app_context&lt;/code&gt; fixture&lt;/li&gt;
&lt;li&gt;If your requires a populated database, import &lt;code&gt;db&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If your code requires examining a part of the request, import &lt;code&gt;request_context&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Annex: Flask contexts vernacular&lt;/h2&gt;
&lt;p&gt;For a given &lt;code&gt;app&lt;/code&gt; object, there are some design aspects and specific objects 
it's good to get familiar with when testing with Flask&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;flask.app.test_client()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Provides a client that can perform requests to our application.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;flask.app.app_context()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The application context, it gives life to &lt;code&gt;current_app&lt;/code&gt;. Starts and dies with
a request.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;flask.app.test_request_context()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The request context, it gives life to &lt;code&gt;request&lt;/code&gt;. If there's no application context
at the moment, it pushes a new one. Starts and ends with a request.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;g&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A proxy that lives within a pushed &lt;strong&gt;application&lt;/strong&gt; context, used to store &lt;em&gt;non sensible&lt;/em&gt;
information about the current application. Its life is bound to that of the request.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;session&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;A proxy that lives within a pushed &lt;strong&gt;request&lt;/strong&gt; context, used to store &lt;em&gt;sensible&lt;/em&gt;
information and encrypted with &lt;/p&gt;
&lt;h2&gt;Annex: Practical differences in code&lt;/h2&gt;
&lt;p&gt;This &lt;a href="https://stackoverflow.com/a/33382823/5819113"&gt;SO answer&lt;/a&gt; puts it simple, so I will be kinda adding my own comments to it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;in app context, before first request context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setting g.foo to abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be abc, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_request_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# this reuses g from the current context&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;in first request context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be abc, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setting g.foo to xyz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# this is the same g, so it will be replaced&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be xyz, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;in app context, after first request context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be abc, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_request_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;in second request context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be abc, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setting g.foo to pqr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pqr&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be pqr, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;in app context, after second request context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be abc, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here's the output that it gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;in app context, before first request context
setting g.foo to abc
g.foo should be abc, is: abc
in first request context
g.foo should be abc, is: abc
setting g.foo to xyz
g.foo should be xyz, is: xyz
in app context, after first request context
g.foo should be abc, is: xyz
in second request context
g.foo should be abc, is: xyz
setting g.foo to pqr
g.foo should be pqr, is: pqr
in app context, after second request context
g.foo should be abc, is: pqr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this first example &lt;code&gt;g&lt;/code&gt; is shared across contexts because it's the same
context in &lt;em&gt;nested contexts&lt;/em&gt;, and it's a &lt;em&gt;caveat&lt;/em&gt; mentioned in the answer (some emphasis is mine)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Every request pushes a new application context". And &lt;a href="http://flask.pocoo.org/docs/0.10/appcontext/"&gt;as the Flask docs say&lt;/a&gt;, the application context "will not be shared between requests". Now, what hasn't been explicitly stated (although I guess it's implied from these statements), and what my testing clearly shows, is that &lt;em&gt;you should &lt;strong&gt;never&lt;/strong&gt; explicitly create multiple request contexts nested inside one application context, because &lt;code&gt;flask.g&lt;/code&gt; (and co) doesn't have any magic whereby it functions in the two different "levels" of context&lt;/em&gt;, with different states existing independently at the application and request levels.&lt;/p&gt;
&lt;p&gt;The reality is that "application context" is potentially quite a misleading name, because &lt;code&gt;app.app_context()&lt;/code&gt; &lt;strong&gt;is&lt;/strong&gt; a per-request context, exactly the same as the "request context". Think of it as a "request context lite", only required in the case where you need some of the variables that normally require a request context, but you don't need access to any request object (e.g. when running batch DB operations in a shell script). If you try and extend the application context to encompass more than one request context, you're asking for trouble. So, rather than my test above, you should instead write code like this with Flask's contexts:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;in app context, before first request context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setting g.foo to abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be abc, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_request_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;in first request context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be None, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setting g.foo to xyz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xyz&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be xyz, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_request_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;in second request context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be None, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setting g.foo to pqr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pqr&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g.foo should be pqr, is: {0}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which will give the expected results:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;in app context, before first request context
setting g.foo to abc
g.foo should be abc, is: abc
in first request context
g.foo should be None, is: None
setting g.foo to xyz
g.foo should be xyz, is: xyz
in second request context
g.foo should be None, is: None
setting g.foo to pqr
g.foo should be pqr, is: pqr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this second example, all three &lt;code&gt;with&lt;/code&gt; blocks are pushing independent contexts. The difference is that
last two are also pushing an application context &lt;em&gt;implicitly&lt;/em&gt;, and the first one is not pushing a request context.&lt;/p&gt;
&lt;p&gt;That's all I have to say about it.&lt;/p&gt;</summary><category term="flask"></category><category term="python"></category></entry><entry><title>On getting started with Jekyll</title><link href="http://diegoquintanav.github.io/on-jekyll.html" rel="alternate"></link><published>2017-10-26T18:01:00-06:00</published><updated>2017-10-26T18:01:00-06:00</updated><author><name>Diego Quintana</name></author><id>tag:diegoquintanav.github.io,2017-10-26:on-jekyll.html</id><summary type="html">&lt;!-- Summary:  --&gt;

&lt;!-- Modified: 2010-12-05 19:30 --&gt;

&lt;p&gt;I've decided to start a blog, (again, for the &lt;span class="math"&gt;\(n_{th}\)&lt;/span&gt; time) and this time I am giving a try on &lt;a href="https://jekyllrb.com/"&gt;jekyll&lt;/a&gt; and the &lt;a href="https://pages.github.com"&gt;github pages&lt;/a&gt;, since they seem to do quite a fine job.&lt;/p&gt;
&lt;p&gt;Setting things up was easy. I'm not going to copy and paste the guides already present in both sites, since it won't add anything. Instead I will try to share a bit of the troubleshooting I had to do during the process.&lt;/p&gt;
&lt;h1&gt;First steps&lt;/h1&gt;
&lt;p&gt;Okay, it took me about nothing to have my site showing a humble &lt;em&gt;Hello World&lt;/em&gt; in my &lt;code&gt;index.html&lt;/code&gt; on my site.&lt;/p&gt;
&lt;h2&gt;Creating your personal page&lt;/h2&gt;
&lt;p&gt;You can create a site for yourself or for some repo you own. I'm dealing with the first case for now: A site for myself.&lt;/p&gt;
&lt;p&gt;Long story short, what I did was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have a &lt;a href="https://github.com"&gt;Github&lt;/a&gt; account. &lt;em&gt;Duh&lt;/em&gt;. Then create a repo named &lt;em&gt;[&lt;strong&gt;your username&lt;/strong&gt;].github.io&lt;/em&gt;. In my case, my username is &lt;em&gt;diegoquintanav&lt;/em&gt;. You can change that later, it seems. Let's not care about that &lt;em&gt;for now&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Add a file named &lt;code&gt;index.html&lt;/code&gt; in the root folder of the repo, and write &lt;em&gt;Hello World&lt;/em&gt; in it.&lt;/li&gt;
&lt;li&gt;???&lt;/li&gt;
&lt;li&gt;Profit! go to &lt;em&gt;[&lt;strong&gt;your username&lt;/strong&gt;].github.io&lt;/em&gt; and you should be able to see the words too.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That was a piece of cake. Next thing you can do is to set up &lt;strong&gt;Jekyll&lt;/strong&gt;. This requires a bit more of work, but don't be scared.
Before doing anything, I believe it's a good thing to understand &lt;em&gt;why&lt;/em&gt; should you use &lt;strong&gt;Jekyll&lt;/strong&gt; and not just plain HTML or &lt;strong&gt;Wordpress&lt;/strong&gt; for this matter. Since this is a personal issue and a matter of preference, I can only share my experience and talk about my needs.&lt;/p&gt;
&lt;p&gt;I tried using Wordpress, which has a lot of resources to get up and running right out of the box. It is also free, which is nice. In my case, I wanted to have more control over the stuff I was writing, namely be able to deploy my stuff whenever I want and to be able to change stuff from the very core, so to speak. Plus, this should work as a first experience running a site. Github pages may be too &lt;em&gt;vanilla&lt;/em&gt; for the hardcore developer, but is a very balanced solution for enthusiasts like me.&lt;/p&gt;
&lt;p&gt;Now there are two ways it seems, to get started. The first one implies creating the folder structure manually, and this process is more or less explained in &lt;a href="http://jmcglone.com/guides/github-pages/"&gt;this fine post&lt;/a&gt; which is also referenced by the &lt;strong&gt;Jekyll&lt;/strong&gt; site.&lt;/p&gt;
&lt;p&gt;What I didn't like about the post, though, is that doing things manually usually imply forgetting about things. I prefer to stick with the solution using &lt;strong&gt;Bundle&lt;/strong&gt; and &lt;strong&gt;Jekyll&lt;/strong&gt; from the terminal, which is more or less described &lt;a href="https://jekyllrb.com/docs/installation/"&gt;here&lt;/a&gt; and &lt;a href="https://jekyllrb.com/docs/quickstart/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;h3&gt;New posts are not being displayed&lt;/h3&gt;
&lt;p&gt;If you deployed &lt;strong&gt;Jekyll&lt;/strong&gt; correctly, it should use the &lt;code&gt;minima&lt;/code&gt; template by default. You should be able to add more posts inside the folder &lt;code&gt;_posts&lt;/code&gt; and see them instantly on your &lt;code&gt;localhost&lt;/code&gt;. That didn't happen in my case. A short way to debug this issue that solved my problem required the &lt;code&gt;--verbose&lt;/code&gt; flag when firing up the service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo bundle &lt;span class="nb"&gt;exec&lt;/span&gt; jekyll serve --verbose
  Logging at level: debug
Configuration file: /home/diego/Documents/diegoquintanav.github.io/_config.yml
  Logging at level: debug
         Requiring: jekyll-feed
         Requiring: kramdown
            Source: /path/to/diegoquintanav.github.io
       Destination: path/to/diegoquintanav.github.io/_site
 Incremental build: disabled. Enable with --incremental
      Generating...
       EntryFilter: excluded /Gemfile
       EntryFilter: excluded /Gemfile.lock
           Reading: _posts/2017-10-27-on-jekyll.md
           Reading: _posts/2017-10-26-welcome-to-jekyll.markdown
          Skipping: _posts/2017-10-27-on-jekyll.md has a future date
        Generating: JekyllFeed::Generator finished in &lt;span class="m"&gt;0&lt;/span&gt;.000744857 seconds.
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In line &lt;code&gt;15&lt;/code&gt; you can observe the &lt;code&gt;Skipping: _posts/2017-10-27-on-jekyll.md has a future date&lt;/code&gt;. Changing the date solved the problem. About the &lt;code&gt;sudo&lt;/code&gt; thing, consider it a malpractice. The ruby environment manager &lt;a href="https://github.com/rbenv/rbenv"&gt;&lt;code&gt;rbenv&lt;/code&gt;&lt;/a&gt; fought bravely against the &lt;a href="https://anaconda.org/"&gt;Anaconda's&lt;/a&gt; &lt;code&gt;gcc&lt;/code&gt; dependencies and I just could not manage to have a ruby instance outside of &lt;code&gt;root&lt;/code&gt;. &lt;em&gt;Sorry&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Other reasons may involve a bad filename formatting or the presence of colons &lt;code&gt;:&lt;/code&gt; in it. You can read more about this &lt;a href="https://stackoverflow.com/questions/30625044/jekyll-post-not-generated"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Using Latex equations&lt;/h3&gt;
&lt;p&gt;This was not trivial for me. If you follow the &lt;a href="https://jekyllrb.com/docs/extras/"&gt;guidelines&lt;/a&gt; inside the documentation, you should end in the tutorial.&lt;/p&gt;
&lt;p&gt;It should be something easy. Copying and pasting the CDN in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of the document. &lt;em&gt;But where is this file?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This was not obvious to me.&lt;/p&gt;
&lt;p&gt;After some &lt;em&gt;google-fu&lt;/em&gt;, nothing was explicit enough to me. &lt;a href="https://github.com/mmistakes/minimal-mistakes/issues/735"&gt;This post&lt;/a&gt; helped a bit, but after realizing that the docs were not good enough, I ended up in &lt;code&gt;#jekyll&lt;/code&gt; on &lt;a href="https://freenode.net/"&gt;freenode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With a bit of help of some nice anons, I found out that&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Themes are either &lt;em&gt;Gem-installed&lt;/em&gt; or locally installed. By default after deploying Jekyll, you should be using &lt;code&gt;Minima&lt;/code&gt; as a &lt;em&gt;Gem Theme&lt;/em&gt;. This means basically that the files that compose your theme live somewhere else. Run &lt;code&gt;bundle show minima&lt;/code&gt;, which  displays the path of the theme. Somewhere inside &lt;code&gt;var&lt;/code&gt; if you are using Ubuntu. If you &lt;code&gt;cd&lt;/code&gt; into that folder you should see some folders, namely &lt;code&gt;_layouts&lt;/code&gt;, which are the templates of the theme and &lt;code&gt;_includes&lt;/code&gt; which I'm not sure yet. Every theme has more or less the same folders with the &lt;em&gt;exact&lt;/em&gt; names, but the way pages are composed by means of templates should differ. Expect that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inside the &lt;code&gt;_layouts&lt;/code&gt; folder you should find &lt;code&gt;head.html&lt;/code&gt;. Copy that file inside your own project, in a folder called &lt;code&gt;_layouts&lt;/code&gt; if you don't have it yet. By doing this you are basically overriding the base files inside the &lt;em&gt;Gem theme&lt;/em&gt; with your own.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you can edit it. Copy the script node from the extras site on Jekyll and there you go. You should be able to render&lt;span class="math"&gt;\( \LaTeX\)&lt;/span&gt; equations easily.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Please beware that in comparison to the traditional way, &lt;em&gt;inline equations&lt;/em&gt; and almost every equation is rendered using doble dollar signs i.e.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;$$&lt;/span&gt;&lt;span class="nv"&gt;\text&lt;/span&gt;&lt;span class="nb"&gt;{A } &lt;/span&gt;&lt;span class="nv"&gt;\LaTeX&lt;/span&gt;&lt;span class="nb"&gt; &lt;/span&gt;&lt;span class="nv"&gt;\text&lt;/span&gt;&lt;span class="nb"&gt;{ equation.}&lt;/span&gt;&lt;span class="s"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="math"&gt;$$\text{A } \LaTeX \text{ equation.}$$&lt;/div&gt;
&lt;p&gt;Other implementation details depend on the Markdown compiler being used, in my case (and odds that yours too if you are starting with jekyll) I'm using &lt;a href="https://kramdown.gettalong.org/syntax.html#math-blocks"&gt;kramdown&lt;/a&gt; which is set by default.&lt;/p&gt;
&lt;h1&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;I think there are a lot of other things to play around, which I will document and comment in the future posts. Not yet. This is my &lt;em&gt;MVP&lt;/em&gt; for now. Next iteration should include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comments section. Might prove useful somewhere.&lt;/li&gt;
&lt;li&gt;Add more sections, editing the &lt;code&gt;navbar&lt;/code&gt; or something equivalent. Add more endpoints.&lt;/li&gt;
&lt;li&gt;Change the site's domain.&lt;/li&gt;
&lt;li&gt;Add some google analytics sorcery or equivalent.&lt;/li&gt;
&lt;li&gt;Theme editing and/or theme changing&lt;/li&gt;
&lt;li&gt;Add embedded python REPL instances. I saw them somewhere on the internet. I want them.&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="jekyll"></category><category term="gh-sites"></category><category term="tutorial"></category></entry></feed>